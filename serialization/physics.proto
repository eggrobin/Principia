syntax = "proto2";

import "serialization/geometry.proto";
import "serialization/integrators.proto";
import "serialization/numerics.proto";
import "serialization/quantities.proto";

package principia.serialization;

message BarycentricRotatingDynamicFrame {
  extend DynamicFrame {
    optional BarycentricRotatingDynamicFrame extension = 6001;
  }
  required int32 primary = 1;
  required int32 secondary = 2;
}

message Body {
  oneof body {
    MassiveBody massive_body = 1;
    MasslessBody massless_body = 2;
  }
}

message BodyCentredBodyDirectionDynamicFrame {
  extend DynamicFrame {
    optional BodyCentredBodyDirectionDynamicFrame extension = 6002;
  }
  required int32 primary = 1;
  required int32 secondary = 2;
}

message BodyCentredNonRotatingDynamicFrame {
  extend DynamicFrame {
    optional BodyCentredNonRotatingDynamicFrame extension = 6000;
  }
  required int32 centre = 1;
}

message BodySurfaceDynamicFrame {
  extend DynamicFrame {
    optional BodySurfaceDynamicFrame extension = 6003;
  }
  required int32 centre = 1;
}

message ContinuousTrajectory {
  message InstantaneousDegreesOfFreedom {
    required Point instant = 1;
    required Pair degrees_of_freedom = 2;
  }
  required Quantity step = 1;
  required Quantity tolerance = 2;
  required Quantity adjusted_tolerance = 3;
  required bool is_unstable = 4;
  optional double maximal_adjusted_tolerance_ratio = 10 [default = 1];
  required int32 degree = 5;
  required int32 degree_age = 6;
  repeated ChebyshevSeries series = 7;
  optional Point first_time = 8;
  repeated InstantaneousDegreesOfFreedom last_point = 9;
}

message DiscreteTrajectory {
  message InstantaneousDegreesOfFreedom {
    required Point instant = 1;
    required Pair degrees_of_freedom = 2;
  }
  message Pointer {  // Pre-Буняковский
    message Fork {
      required int32 children_distance = 1;
      required int32 timeline_distance = 2;
    }
    repeated Fork fork = 1;
  }
  message Litter {
    required Point fork_time = 1;
    repeated DiscreteTrajectory trajectories = 2;
  }
  repeated Litter children = 1;
  repeated InstantaneousDegreesOfFreedom timeline = 2;
  repeated int32 fork_position = 3;
}

message DynamicFrame {
  extensions 6000 to 6999;  // Last used: 6003.
}

message Ephemeris {
  message AdaptiveStepParameters {
    required AdaptiveStepSizeIntegrator integrator = 1;
    required int64 max_steps = 2;
    required Quantity length_integration_tolerance = 3;
    required Quantity speed_integration_tolerance = 4;
  }
  message FixedStepParameters {
    required FixedStepSizeIntegrator integrator = 1;
    required Quantity step = 2;
  }
  repeated MassiveBody body = 1;
  repeated ContinuousTrajectory trajectory = 2;
  required Quantity fitting_tolerance = 5;
  required SystemState last_state = 6;
  optional FixedStepParameters fixed_step_parameters = 7;  // required.
  optional Point t_max = 8;

  // Pre-Буняковский.
  optional FixedStepSizeIntegrator planetary_integrator = 3;
  optional Quantity step = 4;
}

message KeplerianElements {
  required Frame frame = 1;
  required double eccentricity = 2;
  optional Quantity semimajor_axis = 3;
  optional Quantity mean_motion = 4;
  required Quantity inclination = 5;
  required Quantity longitude_of_ascending_node = 6;
  required Quantity argument_of_periapsis = 7;
  required Quantity mean_anomaly = 8;
}

message MassiveBody {
  extensions 2000 to 2999;  // Last used: 2002.
  required Quantity gravitational_parameter = 1;
  optional string name = 2;  // required.
}

message MasslessBody {}

message OblateBody {
  extend RotatingBody {
    optional OblateBody extension = 4000;
  }
  required Quantity j2 = 1;
}

message PreBrouwerOblateBody {
  extend MassiveBody {
    optional PreBrouwerOblateBody extension = 2001;
  }
  required Frame frame = 3;
  required Quantity j2 = 1;
  required Multivector axis = 2;
}

message RotatingBody {
  extend MassiveBody {
    optional RotatingBody extension = 2002;
  }
  extensions 4000 to 4999;  // Last used: 4000.
  required Frame frame = 1;
  optional Quantity mean_radius = 5;
  required Quantity reference_angle = 2;
  required Point reference_instant = 3;
  optional Quantity angular_frequency = 6;  // required
  optional Quantity right_ascension_of_pole = 7;  // required
  optional Quantity declination_of_pole = 8;  // required

  // Pre-Cardano: |angular_velocity| is deprecated, and does not contain the
  // angular velocity in any released version; its norm is 1 rad/s.
  optional Multivector angular_velocity = 4;
}


#include <vector>
#include <utility>

#include "numerics/elliptic_integrals.hpp"
#include "gtest/gtest.h"
#include "testing_utilities/almost_equals.hpp"
#include "testing_utilities/is_near.hpp"

namespace principia {

using testing_utilities::AlmostEquals;
using testing_utilities::IsNear;

namespace numerics {

class EllipticTest : public ::testing::Test {
 protected:
  struct Arguments {
    double n;
    double m;
    double phi_over_PI;
  };
  struct Values {
    double elb;
    double eld;
    double elj;
  };
};

// TODO(phl): This is far from covering all the code paths.  In particular, it
// doesn't seem to go through Elcbdj.
TEST_F(EllipticTest, Xelbdj) {
  // These expected values come from the output given by Fukushima at the end of
  // his xelbdj.txt.  For our purpose, an unit test with assertions is more
  // useful than eyeballing the output.
  std::vector<std::pair<Arguments, Values>> const xelbdj_expected_ = {
      {{0.99976, 1.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.99976, 1.00000, 0.12500},
       {0.382683432365090, 0.020516286796422, 0.022570343177599}},
      {{0.99976, 1.00000, 0.25000},
       {0.707106781186548, 0.174266805832995, 0.266382481911311}},
      {{0.99976, 1.00000, 0.37500},
       {0.923879532511287, 0.691011383661808, 2.345064868304662}},
      {{0.99976, 1.00000, 0.50000},
       {1.000000000000000, 37.132345669220292, 136391.378049815393751}},

      {{0.99976, 0.75000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.99976, 0.75000, 0.12500},
       {0.380165874573813, 0.020265117017211, 0.022288926653528}},
      {{0.99976, 0.75000, 0.25000},
       {0.687224290919399, 0.163999458151786, 0.249346408412777}},
      {{0.99976, 0.75000, 0.37500},
       {0.861000430354716, 0.559500504346794, 1.787983458054265}},
      {{0.99976, 0.75000, 0.50000},
       {0.895902820924732, 1.260612826574912, 196.395167222240275}},

      {{0.99976, 0.50000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.99976, 0.50000, 0.12500},
       {0.377737820324691, 0.020024676408965, 0.022019650853618}},
      {{0.99976, 0.50000, 0.25000},
       {0.670355132106078, 0.155662744143168, 0.235645434075686}},
      {{0.99976, 0.50000, 0.37500},
       {0.820671634698681, 0.491035758158865, 1.522223602858838}},
      {{0.99976, 0.50000, 0.50000},
       {0.847213084793979, 1.006861592507393, 139.562982684668469}},

      {{0.99976, 0.25000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.99976, 0.25000, 0.12500},
       {0.375393116925529, 0.019794159144289, 0.021761598305347}},
      {{0.99976, 0.25000, 0.25000},
       {0.655685639148294, 0.148680462083772, 0.224260632101247}},
      {{0.99976, 0.25000, 0.37500},
       {0.790322477603527, 0.445663694750517, 1.354561202879649}},
      {{0.99976, 0.25000, 0.50000},
       {0.812597772919921, 0.873152581892676, 114.192493470516609}},

      {{0.99976, 0.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.99976, 0.00000, 0.12500},
       {0.373126236145999, 0.019572845552725, 0.021513950041333}},
      {{0.99976, 0.00000, 0.25000},
       {0.642699081698724, 0.142699081698724, 0.214572870954856}},
      {{0.99976, 0.00000, 0.37500},
       {0.765825317844723, 0.412271927251449, 1.235274252890637}},
      {{0.99976, 0.00000, 0.50000},
       {0.785398163397448, 0.785398163397448, 99.013293263192892}},

      {{0.75000, 1.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.75000, 1.00000, 0.12500},
       {0.382683432365090, 0.020516286796422, 0.022012232717184}},
      {{0.75000, 1.00000, 0.25000},
       {0.707106781186548, 0.174266805832995, 0.233634924921085}},
      {{0.75000, 1.00000, 0.37500},
       {0.923879532511287, 0.691011383661808, 1.383967203057269}},
      {{0.75000, 1.00000, 0.50000},
       {1.000000000000000, 37.132345669220292, 146.446614706473639}},

      {{0.75000, 0.75000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.75000, 0.75000, 0.12500},
       {0.380165874573813, 0.020265117017211, 0.021739095264120}},
      {{0.75000, 0.75000, 0.25000},
       {0.687224290919399, 0.163999458151786, 0.219075035542894}},
      {{0.75000, 0.75000, 0.37500},
       {0.861000430354716, 0.559500504346794, 1.086438640019290}},
      {{0.75000, 0.75000, 0.50000},
       {0.895902820924732, 1.260612826574912, 3.583611283698927}},

      {{0.75000, 0.50000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.75000, 0.50000, 0.12500},
       {0.377737820324691, 0.020024676408965, 0.021477710411120}},
      {{0.75000, 0.50000, 0.25000},
       {0.670355132106078, 0.155662744143168, 0.207328297405433}},
      {{0.75000, 0.50000, 0.37500},
       {0.820671634698681, 0.491035758158865, 0.938149197056845}},
      {{0.75000, 0.50000, 0.50000},
       {0.847213084793979, 1.006861592507393, 2.768720224791972}},

      {{0.75000, 0.25000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.75000, 0.25000, 0.12500},
       {0.375393116925529, 0.019794159144289, 0.021227191478047}},
      {{0.75000, 0.25000, 0.25000},
       {0.655685639148294, 0.148680462083772, 0.197541942156515}},
      {{0.75000, 0.25000, 0.37500},
       {0.790322477603527, 0.445663694750517, 0.842350424403990}},
      {{0.75000, 0.25000, 0.50000},
       {0.812597772919921, 0.873152581892676, 2.357292208141529}},

      {{0.75000, 0.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.75000, 0.00000, 0.12500},
       {0.373126236145999, 0.019572845552725, 0.020986746876685}},
      {{0.75000, 0.00000, 0.25000},
       {0.642699081698724, 0.142699081698724, 0.189196072805552}},
      {{0.75000, 0.00000, 0.37500},
       {0.765825317844723, 0.412271927251449, 0.773098374942894}},
      {{0.75000, 0.00000, 0.50000},
       {0.785398163397448, 0.785398163397448, 2.094395102393195}},

      {{0.50000, 1.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.50000, 1.00000, 0.12500},
       {0.382683432365090, 0.020516286796422, 0.021485423570639}},
      {{0.50000, 1.00000, 0.25000},
       {0.707106781186548, 0.174266805832995, 0.209074775614900}},
      {{0.50000, 1.00000, 0.37500},
       {0.923879532511287, 0.691011383661808, 1.020774439803883}},
      {{0.50000, 1.00000, 0.50000},
       {1.000000000000000, 37.132345669220292, 73.771790377879654}},

      {{0.50000, 0.75000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.50000, 0.75000, 0.12500},
       {0.380165874573813, 0.020265117017211, 0.021220059796666}},
      {{0.50000, 0.75000, 0.25000},
       {0.687224290919399, 0.163999458151786, 0.196323448596668}},
      {{0.50000, 0.75000, 0.37500},
       {0.861000430354716, 0.559500504346794, 0.813099999300043}},
      {{0.50000, 0.75000, 0.50000},
       {0.895902820924732, 1.260612826574912, 2.156515647499643}},

      {{0.50000, 0.50000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.50000, 0.50000, 0.12500},
       {0.377737820324691, 0.020024676408965, 0.020966085381627}},
      {{0.50000, 0.50000, 0.25000},
       {0.670355132106078, 0.155662744143168, 0.186009725832904}},
      {{0.50000, 0.50000, 0.37500},
       {0.820671634698681, 0.491035758158865, 0.707394438302897}},
      {{0.50000, 0.50000, 0.50000},
       {0.847213084793979, 1.006861592507393, 1.694426169587957}},

      {{0.50000, 0.25000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.50000, 0.25000, 0.12500},
       {0.375393116925529, 0.019794159144289, 0.020722642399758}},
      {{0.50000, 0.25000, 0.25000},
       {0.655685639148294, 0.148680462083772, 0.177399255346557}},
      {{0.50000, 0.25000, 0.37500},
       {0.790322477603527, 0.445663694750517, 0.638278769417304}},
      {{0.50000, 0.25000, 0.50000},
       {0.812597772919921, 0.873152581892676, 1.455842298777197}},

      {{0.50000, 0.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.50000, 0.00000, 0.12500},
       {0.373126236145999, 0.019572845552725, 0.020488964835011}},
      {{0.50000, 0.00000, 0.25000},
       {0.642699081698724, 0.142699081698724, 0.170043175939310}},
      {{0.50000, 0.00000, 0.37500},
       {0.765825317844723, 0.412271927251449, 0.587897023961480}},
      {{0.50000, 0.00000, 0.50000},
       {0.785398163397448, 0.785398163397448, 1.301290284568573}},

      {{0.25000, 1.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.25000, 1.00000, 0.12500},
       {0.382683432365090, 0.020516286796422, 0.020987613506348}},
      {{0.25000, 1.00000, 0.25000},
       {0.707106781186548, 0.174266805832995, 0.189834190890406}},
      {{0.25000, 1.00000, 0.37500},
       {0.923879532511287, 0.691011383661808, 0.820455985054876}},
      {{0.25000, 1.00000, 0.50000},
       {1.000000000000000, 37.132345669220292, 49.378311174069594}},

      {{0.25000, 0.75000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.25000, 0.75000, 0.12500},
       {0.380165874573813, 0.020265117017211, 0.020729558156099}},
      {{0.25000, 0.75000, 0.25000},
       {0.687224290919399, 0.163999458151786, 0.178468021910232}},
      {{0.25000, 0.75000, 0.37500},
       {0.861000430354716, 0.559500504346794, 0.659754278441750}},
      {{0.25000, 0.75000, 0.50000},
       {0.895902820924732, 1.260612826574912, 1.580795429464887}},

      {{0.25000, 0.50000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.25000, 0.50000, 0.12500},
       {0.377737820324691, 0.020024676408965, 0.020482551737041}},
      {{0.25000, 0.50000, 0.25000},
       {0.670355132106078, 0.155662744143168, 0.169255411762512}},
      {{0.25000, 0.50000, 0.37500},
       {0.820671634698681, 0.491035758158865, 0.576869776220026}},
      {{0.25000, 0.50000, 0.50000},
       {0.847213084793979, 1.006861592507393, 1.254178733860736}},

      {{0.25000, 0.25000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.25000, 0.25000, 0.12500},
       {0.375393116925529, 0.019794159144289, 0.020245763214615}},
      {{0.25000, 0.25000, 0.25000},
       {0.655685639148294, 0.148680462083772, 0.161550873764594}},
      {{0.25000, 0.25000, 0.37500},
       {0.790322477603527, 0.445663694750517, 0.522250714438824}},
      {{0.25000, 0.25000, 0.50000},
       {0.812597772919921, 0.873152581892676, 1.083463697226561}},

      {{0.25000, 0.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.25000, 0.00000, 0.12500},
       {0.373126236145999, 0.019572845552725, 0.020018450492512}},
      {{0.25000, 0.00000, 0.25000},
       {0.642699081698724, 0.142699081698724, 0.154959044897878}},
      {{0.25000, 0.00000, 0.37500},
       {0.765825317844723, 0.412271927251449, 0.482215845099239}},
      {{0.25000, 0.00000, 0.50000},
       {0.785398163397448, 0.785398163397448, 0.972012149757285}},

      {{0.00000, 1.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.00000, 1.00000, 0.12500},
       {0.382683432365090, 0.020516286796422, 0.020516286796422}},
      {{0.00000, 1.00000, 0.25000},
       {0.707106781186548, 0.174266805832995, 0.174266805832995}},
      {{0.00000, 1.00000, 0.37500},
       {0.923879532511287, 0.691011383661808, 0.691011383661808}},
      {{0.00000, 1.00000, 0.50000},
       {1.000000000000000, 37.132345669220292, 37.132345669220300}},

      {{0.00000, 0.75000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.00000, 0.75000, 0.12500},
       {0.380165874573813, 0.020265117017211, 0.020265117017211}},
      {{0.00000, 0.75000, 0.25000},
       {0.687224290919399, 0.163999458151786, 0.163999458151786}},
      {{0.00000, 0.75000, 0.37500},
       {0.861000430354716, 0.559500504346794, 0.559500504346794}},
      {{0.00000, 0.75000, 0.50000},
       {0.895902820924732, 1.260612826574912, 1.260612826574911}},

      {{0.00000, 0.50000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.00000, 0.50000, 0.12500},
       {0.377737820324691, 0.020024676408965, 0.020024676408965}},
      {{0.00000, 0.50000, 0.25000},
       {0.670355132106078, 0.155662744143168, 0.155662744143168}},
      {{0.00000, 0.50000, 0.37500},
       {0.820671634698681, 0.491035758158865, 0.491035758158865}},
      {{0.00000, 0.50000, 0.50000},
       {0.847213084793979, 1.006861592507393, 1.006861592507393}},

      {{0.00000, 0.25000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.00000, 0.25000, 0.12500},
       {0.375393116925529, 0.019794159144289, 0.019794159144289}},
      {{0.00000, 0.25000, 0.25000},
       {0.655685639148294, 0.148680462083772, 0.148680462083772}},
      {{0.00000, 0.25000, 0.37500},
       {0.790322477603527, 0.445663694750517, 0.445663694750517}},
      {{0.00000, 0.25000, 0.50000},
       {0.812597772919921, 0.873152581892676, 0.873152581892676}},

      {{0.00000, 0.00000, 0.00000},
       {0.000000000000000, 0.000000000000000, 0.000000000000000}},
      {{0.00000, 0.00000, 0.12500},
       {0.373126236145999, 0.019572845552725, 0.019572845552725}},
      {{0.00000, 0.00000, 0.25000},
       {0.642699081698724, 0.142699081698724, 0.142699081698724}},
      {{0.00000, 0.00000, 0.37500},
       {0.765825317844723, 0.412271927251449, 0.412271927251449}},
      {{0.00000, 0.00000, 0.50000},
       {0.785398163397448, 0.785398163397448, 0.785398163397448}}};
       
       constexpr double PI = 3.1415926535897932384626433;
  constexpr double PIHALF = 1.5707963267948966192313216916398;
  double dnc, dmc, dphi, nc, nn, mc, mm, phi, phic, b, d, j;
  int lend, kend, iend;

  lend = 5;
  kend = 5;
  iend = 4;
  dnc = 1.0 / static_cast<double>(lend - 1);
  dmc = 1.0 / static_cast<double>(kend - 1);
  dphi = PIHALF / static_cast<double>(iend);
  std::printf(
      "%10s%10s%10s%25s%25s%25s\n", "n", "m", "phi/PI", "elb", "eld", "elj");
  int expected_index = 0;
  for (int l = 1; l <= lend; ++l) {
    nc = static_cast<double>(l - 1) * dnc;
    if (nc <= 1.05e-8) {
      nc = 1.05e-8;
    }
    float rnc = static_cast<float>(nc);
    if (rnc <= 2.44e-4) {
      nc = 2.44e-4;
    }
    nn = 1.0 - nc;
    for (int k = 1; k <= kend; ++k) {
      std::printf("\n");
      mc = static_cast<double>(k - 1) * dmc;
      if (mc <= 0.0) {
        mc = 1.21e-32;
      }
      mm = 1.0 - mc;
      for (int i = 0; i <= iend; ++i) {
        phi = dphi * static_cast<double>(i);
        phic = dphi * static_cast<double>(iend - i);
        Elbdj(phi, phic, nn, mc, b, d, j);
        std::printf("%10.5f%10.5f%10.5f%25.15f%25.15f%25.15f\n",
                    nn,
                    mm,
                    phi / PI,
                    b,
                    d,
                    j);

        auto const& expected = xelbdj_expected_[expected_index];
        auto const& expected_arguments = expected.first;
        auto const& expected_values = expected.second;
        EXPECT_THAT(nn, IsNear(expected_arguments.n, 1.001));
        EXPECT_THAT(mm, IsNear(expected_arguments.m, 1.001));
        EXPECT_THAT(phi / PI, IsNear(expected_arguments.phi_over_PI, 1.001));
        EXPECT_THAT(b, AlmostEquals(expected_values.elb, 0, 8));
        EXPECT_THAT(d, AlmostEquals(expected_values.eld, 0, 97));
        EXPECT_THAT(j, AlmostEquals(expected_values.elj, 0, 135));
        ++expected_index;
      }
    }
  }
}

}  // namespace numerics
}  // namespace principia
